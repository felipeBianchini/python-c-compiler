
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTnonassocEQUALNOT_EQUALGREATERLESSGREATER_EQUALLESS_EQUALleftPLUSMINUSleftMULDIVINT_DIVMODrightPOWADD_ASSIGN AND ASSIGN BREAK CLASS COLON COMMA CONTINUE DEF DENT DIV DIV_ASSIGN DOT ELIF ELSE EQUAL FALSE FLOAT FOR GREATER GREATER_EQUAL ID IF IN INDENT INTEGER INT_DIV INT_DIV_ASSIGN ITER LBRACE LBRACKET LESS LESS_EQUAL LPAREN MINUS MOD MOD_ASSIGN MUL MULTISTRING MUL_ASSIGN NEWLINE NEXT NONE NOT NOT_EQUAL OR PASS PLUS POW POW_ASSIGN PRINT RANGE RBRACE RBRACKET RETURN RPAREN SELF SEMICOLON STR STRING SUB_ASSIGN TRUE WHILE __INIT__program : complete_sentence program\n| complete_sentence\nempty :optional_newline : NEWLINE\n| emptydata_type : r_operation\n| string_concat\n| class_atribute_use\n| NONE\nref_data_type : ID\n| class_atribute_use         \nnumber : INTEGER \n| FLOATstring : MULTISTRING\n| number_to_string\narithmetic_symbol : PLUS \n| MINUS\n| MUL \n| DIV \n| INT_DIV \n| MOD \n| POWassignment_symbol : ADD_ASSIGN \n| SUB_ASSIGN \n| MUL_ASSIGN \n| DIV_ASSIGN \n| MOD_ASSIGN \n| INT_DIV_ASSIGN \n| POW_ASSIGNrelational_symbol : EQUAL \n| NOT_EQUAL \n| GREATER \n| LESS \n| GREATER_EQUAL \n| LESS_EQUALbinary_logical_operator : AND \n| ORconditional_operator : TRUE \n| FALSEsentence : operation\n| function\n| function_call\n| class\ncomplete_sentence : sentence optional_newlinecomplete_sentences : complete_sentence complete_sentences\n| complete_sentence            \noperation : assignment_operation \n| simple_assignment_operation \n| r_operation\nr_operation : arithmetic_operation \n| binary_logical_operation\nsimple_assignment_operation : ref_data_type ASSIGN data_type\n| ref_data_type ASSIGN r_operation\nassignment_operation : ID assignment_symbol numberarithmetic_operation : arithmetic_operation arithmetic_symbol arithmetic_operation\n| LPAREN arithmetic_operation RPAREN\n| number \nrelational_operation : LPAREN relational_operation RPAREN\n| data_type relational_symbol data_type\nunary_logical_operation : NOT unary_logical_operation\n| LPAREN unary_logical_operation RPAREN\n| relational_operation\n| ID\n| conditional_operator\nbinary_logical_operation : binary_logical_operation binary_logical_operator binary_logical_operation\n| LPAREN binary_logical_operation RPAREN\n| unary_logical_operation\nnumber_to_string : STR LPAREN number RPARENstring_concat : string_concat PLUS string\n| string\nargument : ID\n| ID COLON data_type\narguments : argument\n| arguments COMMA argument\n| empty\nfunction_call : ID LPAREN arguments RPAREN\n| class_atribute_use LPAREN arguments RPAREN\nreturn : RETURN\n| RETURN data_type\n| RETURN r_operation\noptional_return : return\n| empty\nfunction : DEF ID LPAREN arguments RPAREN COLON NEWLINE INDENT complete_sentences optional_return DENTclass_arguments : SELF COMMA arguments\n| SELF\nclass_atribute_use : SELF DOT IDclass_method : DEF __INIT__ LPAREN class_arguments RPAREN COLON NEWLINE INDENT complete_sentences DENT\n| DEF ID LPAREN class_arguments RPAREN COLON NEWLINE INDENT complete_sentences optional_return DENT\nclass_part : class_method\n| complete_sentences\nclass_parts : class_parts class_part\n| class_part\nclass : CLASS ID COLON NEWLINE INDENT class_parts DENT'
    
_lr_action_items = {'DEF':([0,2,3,4,5,6,7,8,9,10,12,16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,79,88,89,90,91,92,95,96,97,98,100,102,103,107,109,112,116,118,119,120,121,123,125,126,129,130,144,152,153,156,158,],[11,11,-3,-40,-41,-42,-43,-47,-48,-49,-63,-57,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,-60,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,-86,-69,-76,-77,-68,122,122,-92,-89,-90,11,-93,-91,-45,11,-83,11,11,-87,-88,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,41,54,55,56,57,59,60,61,62,63,64,65,66,75,76,77,78,79,80,83,88,89,90,91,92,95,96,97,98,100,101,102,103,106,107,108,109,112,116,118,119,120,121,122,123,125,126,129,130,132,140,142,144,152,153,156,158,],[12,12,-3,-40,-41,-42,-43,-47,-48,-49,40,-63,54,58,-57,-50,-51,-67,-12,-13,54,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,84,-63,-6,-8,84,54,54,-30,-31,-32,-33,-34,-35,54,-36,-37,102,-60,54,84,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,54,-86,-69,54,-76,84,-77,-68,12,12,-92,-89,-90,128,12,-93,-91,-45,12,84,54,84,-83,12,12,-87,-88,]),'CLASS':([0,2,3,4,5,6,7,8,9,10,12,16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,79,88,89,90,91,92,95,96,97,98,100,102,103,107,109,112,116,118,119,120,121,123,125,126,129,130,144,152,153,156,158,],[15,15,-3,-40,-41,-42,-43,-47,-48,-49,-63,-57,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,-60,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,-86,-69,-76,-77,-68,15,15,-92,-89,-90,15,-93,-91,-45,15,-83,15,15,-87,-88,]),'SELF':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,59,60,61,62,63,64,65,66,75,76,77,79,80,88,89,90,91,92,95,96,97,98,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,131,132,140,144,152,153,156,158,],[21,21,-3,-40,-41,-42,-43,-47,-48,-49,-63,21,-57,-50,-51,-67,-12,-13,21,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,21,21,-30,-31,-32,-33,-34,-35,21,-36,-37,-60,21,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,21,-86,-69,21,-76,-77,-68,21,21,-92,-89,-90,21,-93,-91,-45,21,135,135,21,-83,21,21,-87,-88,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,12,13,14,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,88,89,90,91,92,95,96,97,98,99,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,127,128,129,130,140,144,152,153,156,158,],[13,13,-3,-40,-41,-42,-43,-47,-48,-49,41,13,57,-57,-50,-51,-67,-12,-13,80,-62,-64,-38,-39,-7,-9,-70,-14,-15,82,-44,-4,-5,83,-63,-6,-8,13,13,-30,-31,-32,-33,-34,-35,99,-16,-17,-18,-19,-20,-21,-22,101,-36,-37,-60,80,-54,-56,-66,-61,-58,-52,-6,-59,-55,99,-65,101,-86,-69,13,-76,-77,-68,13,13,-92,-89,-90,13,-93,-91,131,132,-45,13,13,-83,13,13,-87,-88,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,42,43,44,45,46,47,48,49,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,88,89,90,91,92,95,96,97,98,99,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,140,144,152,153,156,158,],[23,23,-3,-40,-41,-42,-43,-47,-48,-49,-63,23,-57,-50,-51,-67,-12,-13,23,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,23,-23,-24,-25,-26,-27,-28,-29,-63,-6,-8,23,23,-30,-31,-32,-33,-34,-35,23,-16,-17,-18,-19,-20,-21,-22,23,-36,-37,-60,23,23,-54,-56,-66,-61,-58,-52,-6,-59,-55,23,-65,23,-86,-69,23,-76,-77,-68,23,23,-92,-89,-90,23,-93,-91,-45,23,23,-83,23,23,-87,-88,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,42,43,44,45,46,47,48,49,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,88,89,90,91,92,95,96,97,98,99,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,140,144,152,153,156,158,],[24,24,-3,-40,-41,-42,-43,-47,-48,-49,-63,24,-57,-50,-51,-67,-12,-13,24,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,24,-23,-24,-25,-26,-27,-28,-29,-63,-6,-8,24,24,-30,-31,-32,-33,-34,-35,24,-16,-17,-18,-19,-20,-21,-22,24,-36,-37,-60,24,24,-54,-56,-66,-61,-58,-52,-6,-59,-55,24,-65,24,-86,-69,24,-76,-77,-68,24,24,-92,-89,-90,24,-93,-91,-45,24,24,-83,24,24,-87,-88,]),'NOT':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,59,60,61,62,63,64,65,66,75,76,77,79,80,88,89,90,91,92,95,96,97,98,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,140,144,152,153,156,158,],[25,25,-3,-40,-41,-42,-43,-47,-48,-49,-63,25,-57,-50,-51,-67,-12,-13,25,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,25,25,-30,-31,-32,-33,-34,-35,25,-36,-37,-60,25,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,25,-86,-69,25,-76,-77,-68,25,25,-92,-89,-90,25,-93,-91,-45,25,25,-83,25,25,-87,-88,]),'TRUE':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,59,60,61,62,63,64,65,66,75,76,77,79,80,88,89,90,91,92,95,96,97,98,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,140,144,152,153,156,158,],[28,28,-3,-40,-41,-42,-43,-47,-48,-49,-63,28,-57,-50,-51,-67,-12,-13,28,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,28,28,-30,-31,-32,-33,-34,-35,28,-36,-37,-60,28,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,28,-86,-69,28,-76,-77,-68,28,28,-92,-89,-90,28,-93,-91,-45,28,28,-83,28,28,-87,-88,]),'FALSE':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,59,60,61,62,63,64,65,66,75,76,77,79,80,88,89,90,91,92,95,96,97,98,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,140,144,152,153,156,158,],[29,29,-3,-40,-41,-42,-43,-47,-48,-49,-63,29,-57,-50,-51,-67,-12,-13,29,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,29,29,-30,-31,-32,-33,-34,-35,29,-36,-37,-60,29,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,29,-86,-69,29,-76,-77,-68,29,29,-92,-89,-90,29,-93,-91,-45,29,29,-83,29,29,-87,-88,]),'NONE':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,59,60,61,62,63,64,65,66,75,76,77,79,80,88,89,90,91,92,95,96,97,98,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,140,144,152,153,156,158,],[31,31,-3,-40,-41,-42,-43,-47,-48,-49,-63,31,-57,-50,-51,-67,-12,-13,31,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,31,31,-30,-31,-32,-33,-34,-35,31,-36,-37,-60,31,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,31,-86,-69,31,-76,-77,-68,31,31,-92,-89,-90,31,-93,-91,-45,31,31,-83,31,31,-87,-88,]),'MULTISTRING':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,59,60,61,62,63,64,65,66,75,76,77,79,80,81,88,89,90,91,92,95,96,97,98,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,140,144,152,153,156,158,],[33,33,-3,-40,-41,-42,-43,-47,-48,-49,-63,33,-57,-50,-51,-67,-12,-13,33,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,33,33,-30,-31,-32,-33,-34,-35,33,-36,-37,-60,33,33,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,33,-86,-69,33,-76,-77,-68,33,33,-92,-89,-90,33,-93,-91,-45,33,33,-83,33,33,-87,-88,]),'STR':([0,2,3,4,5,6,7,8,9,10,12,13,16,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,59,60,61,62,63,64,65,66,75,76,77,79,80,81,88,89,90,91,92,95,96,97,98,100,101,102,103,106,107,109,112,116,118,119,120,121,123,125,126,129,130,140,144,152,153,156,158,],[35,35,-3,-40,-41,-42,-43,-47,-48,-49,-63,35,-57,-50,-51,-67,-12,-13,35,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,35,35,-30,-31,-32,-33,-34,-35,35,-36,-37,-60,35,35,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,35,-86,-69,35,-76,-77,-68,35,35,-92,-89,-90,35,-93,-91,-45,35,35,-83,35,35,-87,-88,]),'$end':([1,2,3,4,5,6,7,8,9,10,12,16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,36,37,38,39,54,55,56,79,88,89,90,91,92,95,96,97,98,100,102,103,107,109,112,125,144,],[0,-2,-3,-40,-41,-42,-43,-47,-48,-49,-63,-57,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-1,-44,-4,-5,-63,-6,-8,-60,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,-86,-69,-76,-77,-68,-93,-83,]),'NEWLINE':([3,4,5,6,7,8,9,10,12,16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,54,55,56,79,88,89,90,91,92,94,95,96,97,98,100,102,103,107,109,112,117,125,144,147,149,],[38,-40,-41,-42,-43,-47,-48,-49,-63,-57,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-63,-6,-8,-60,-54,-56,-66,-61,-58,110,-52,-6,-59,-55,-65,-86,-69,-76,-77,-68,124,-93,-83,150,151,]),'DENT':([3,4,5,6,7,8,9,10,12,16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,79,88,89,90,91,92,95,96,97,98,100,102,103,107,109,112,118,119,120,121,123,125,126,129,133,137,138,139,140,144,145,146,154,155,156,157,158,],[-3,-40,-41,-42,-43,-47,-48,-49,-63,-57,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,-60,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,-86,-69,-76,-77,-68,125,-92,-89,-90,-46,-93,-91,-45,-3,144,-81,-82,-78,-83,-79,-6,156,-3,-87,158,-88,]),'RETURN':([3,4,5,6,7,8,9,10,12,16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,37,38,39,54,55,56,79,88,89,90,91,92,95,96,97,98,100,102,103,107,109,112,123,125,129,133,144,155,],[-3,-40,-41,-42,-43,-47,-48,-49,-63,-57,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-44,-4,-5,-63,-6,-8,-60,-54,-56,-66,-61,-58,-52,-6,-59,-55,-65,-86,-69,-76,-77,-68,-46,-93,-45,140,-83,140,]),'EQUAL':([10,12,14,16,18,19,20,22,23,24,26,27,28,29,30,31,32,33,34,50,51,52,53,54,55,56,79,89,90,91,92,95,96,97,98,100,102,103,112,114,145,146,],[-6,-63,-8,-57,61,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-50,-51,-67,-62,-63,-6,-8,-60,-56,-66,-61,-58,61,-6,61,-55,-51,-86,-69,-68,61,61,-6,]),'NOT_EQUAL':([10,12,14,16,18,19,20,22,23,24,26,27,28,29,30,31,32,33,34,50,51,52,53,54,55,56,79,89,90,91,92,95,96,97,98,100,102,103,112,114,145,146,],[-6,-63,-8,-57,62,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-50,-51,-67,-62,-63,-6,-8,-60,-56,-66,-61,-58,62,-6,62,-55,-51,-86,-69,-68,62,62,-6,]),'GREATER':([10,12,14,16,18,19,20,22,23,24,26,27,28,29,30,31,32,33,34,50,51,52,53,54,55,56,79,89,90,91,92,95,96,97,98,100,102,103,112,114,145,146,],[-6,-63,-8,-57,63,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-50,-51,-67,-62,-63,-6,-8,-60,-56,-66,-61,-58,63,-6,63,-55,-51,-86,-69,-68,63,63,-6,]),'LESS':([10,12,14,16,18,19,20,22,23,24,26,27,28,29,30,31,32,33,34,50,51,52,53,54,55,56,79,89,90,91,92,95,96,97,98,100,102,103,112,114,145,146,],[-6,-63,-8,-57,64,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-50,-51,-67,-62,-63,-6,-8,-60,-56,-66,-61,-58,64,-6,64,-55,-51,-86,-69,-68,64,64,-6,]),'GREATER_EQUAL':([10,12,14,16,18,19,20,22,23,24,26,27,28,29,30,31,32,33,34,50,51,52,53,54,55,56,79,89,90,91,92,95,96,97,98,100,102,103,112,114,145,146,],[-6,-63,-8,-57,65,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-50,-51,-67,-62,-63,-6,-8,-60,-56,-66,-61,-58,65,-6,65,-55,-51,-86,-69,-68,65,65,-6,]),'LESS_EQUAL':([10,12,14,16,18,19,20,22,23,24,26,27,28,29,30,31,32,33,34,50,51,52,53,54,55,56,79,89,90,91,92,95,96,97,98,100,102,103,112,114,145,146,],[-6,-63,-8,-57,66,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-50,-51,-67,-62,-63,-6,-8,-60,-56,-66,-61,-58,66,-6,66,-55,-51,-86,-69,-68,66,66,-6,]),'ASSIGN':([12,14,17,102,],[-10,-11,59,-86,]),'AND':([12,16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,51,52,53,54,55,56,79,89,90,91,92,97,98,100,102,103,112,],[-63,-57,-50,76,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,76,-67,-62,-63,-6,-8,-60,-56,-66,-61,-58,-59,-55,76,-86,-69,-68,]),'OR':([12,16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,51,52,53,54,55,56,79,89,90,91,92,97,98,100,102,103,112,],[-63,-57,-50,77,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,77,-67,-62,-63,-6,-8,-60,-56,-66,-61,-58,-59,-55,77,-86,-69,-68,]),'ADD_ASSIGN':([12,],[43,]),'SUB_ASSIGN':([12,],[44,]),'MUL_ASSIGN':([12,],[45,]),'DIV_ASSIGN':([12,],[46,]),'MOD_ASSIGN':([12,],[47,]),'INT_DIV_ASSIGN':([12,],[48,]),'POW_ASSIGN':([12,],[49,]),'PLUS':([16,19,23,24,30,32,33,34,50,89,98,103,111,112,],[-57,68,-12,-13,81,-70,-14,-15,68,-56,68,-69,68,-68,]),'MINUS':([16,19,23,24,50,89,98,111,],[-57,69,-12,-13,69,-56,69,69,]),'MUL':([16,19,23,24,50,89,98,111,],[-57,70,-12,-13,70,-56,70,70,]),'DIV':([16,19,23,24,50,89,98,111,],[-57,71,-12,-13,71,-56,71,71,]),'INT_DIV':([16,19,23,24,50,89,98,111,],[-57,72,-12,-13,72,-56,72,72,]),'MOD':([16,19,23,24,50,89,98,111,],[-57,73,-12,-13,73,-56,73,73,]),'POW':([16,19,23,24,50,89,98,111,],[-57,74,-12,-13,74,-56,74,74,]),'RPAREN':([16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,41,50,51,52,53,54,55,56,57,79,83,84,85,86,87,89,90,91,92,93,97,98,100,102,103,104,105,111,112,114,115,132,134,135,136,142,148,],[-57,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-3,89,90,91,92,-63,-6,-8,-3,-60,-3,-71,107,-73,-75,-56,-66,-61,-58,109,-59,-55,-65,-86,-69,112,113,89,-68,-72,-74,-3,141,-85,143,-3,-84,]),'COMMA':([16,19,20,22,23,24,26,27,28,29,30,31,32,33,34,41,54,55,56,57,79,83,84,85,86,87,89,90,91,92,93,97,98,100,102,103,105,112,114,115,132,135,142,148,],[-57,-50,-51,-67,-12,-13,-62,-64,-38,-39,-7,-9,-70,-14,-15,-3,-63,-6,-8,-3,-60,-3,-71,108,-73,-75,-56,-66,-61,-58,108,-59,-55,-65,-86,-69,108,-68,-72,-74,-3,142,-3,108,]),'DOT':([21,],[78,]),'COLON':([58,84,113,141,143,],[94,106,117,147,149,]),'INDENT':([110,124,150,151,],[116,130,152,153,]),'__INIT__':([122,],[127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,36,]),'complete_sentence':([0,2,116,118,123,130,152,153,],[2,2,123,123,123,123,123,123,]),'sentence':([0,2,116,118,123,130,152,153,],[3,3,3,3,3,3,3,3,]),'operation':([0,2,116,118,123,130,152,153,],[4,4,4,4,4,4,4,4,]),'function':([0,2,116,118,123,130,152,153,],[5,5,5,5,5,5,5,5,]),'function_call':([0,2,116,118,123,130,152,153,],[6,6,6,6,6,6,6,6,]),'class':([0,2,116,118,123,130,152,153,],[7,7,7,7,7,7,7,7,]),'assignment_operation':([0,2,116,118,123,130,152,153,],[8,8,8,8,8,8,8,8,]),'simple_assignment_operation':([0,2,116,118,123,130,152,153,],[9,9,9,9,9,9,9,9,]),'r_operation':([0,2,13,25,59,60,75,80,101,106,116,118,123,130,140,152,153,],[10,10,55,55,96,55,55,55,55,55,10,10,10,10,146,10,10,]),'class_atribute_use':([0,2,13,25,59,60,75,80,101,106,116,118,123,130,140,152,153,],[14,14,56,56,56,56,56,56,56,56,14,14,14,14,56,14,14,]),'number':([0,2,13,25,42,59,60,67,75,80,82,99,101,106,116,118,123,130,140,152,153,],[16,16,16,16,88,16,16,16,16,16,104,16,16,16,16,16,16,16,16,16,16,]),'ref_data_type':([0,2,116,118,123,130,152,153,],[17,17,17,17,17,17,17,17,]),'data_type':([0,2,13,25,59,60,75,80,101,106,116,118,123,130,140,152,153,],[18,18,18,18,95,97,18,18,18,114,18,18,18,18,145,18,18,]),'arithmetic_operation':([0,2,13,25,59,60,67,75,80,99,101,106,116,118,123,130,140,152,153,],[19,19,50,19,19,19,98,19,50,111,50,19,19,19,19,19,19,19,19,]),'binary_logical_operation':([0,2,13,25,59,60,75,80,101,106,116,118,123,130,140,152,153,],[20,20,51,20,20,20,100,51,51,20,20,20,20,20,20,20,20,]),'unary_logical_operation':([0,2,13,25,59,60,75,80,101,106,116,118,123,130,140,152,153,],[22,22,52,79,22,22,22,52,52,22,22,22,22,22,22,22,22,]),'relational_operation':([0,2,13,25,59,60,75,80,101,106,116,118,123,130,140,152,153,],[26,26,53,26,26,26,26,53,53,26,26,26,26,26,26,26,26,]),'conditional_operator':([0,2,13,25,59,60,75,80,101,106,116,118,123,130,140,152,153,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'string_concat':([0,2,13,25,59,60,75,80,101,106,116,118,123,130,140,152,153,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'string':([0,2,13,25,59,60,75,80,81,101,106,116,118,123,130,140,152,153,],[32,32,32,32,32,32,32,32,103,32,32,32,32,32,32,32,32,32,]),'number_to_string':([0,2,13,25,59,60,75,80,81,101,106,116,118,123,130,140,152,153,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'optional_newline':([3,],[37,]),'empty':([3,41,57,83,132,133,142,155,],[39,87,87,87,87,139,87,139,]),'assignment_symbol':([12,],[42,]),'relational_symbol':([18,95,97,114,145,],[60,60,60,60,60,]),'arithmetic_symbol':([19,50,98,111,],[67,67,67,67,]),'binary_logical_operator':([20,51,100,],[75,75,75,]),'arguments':([41,57,83,132,142,],[85,93,105,105,148,]),'argument':([41,57,83,108,132,142,],[86,86,86,115,86,86,]),'class_parts':([116,],[118,]),'class_part':([116,118,],[119,126,]),'class_method':([116,118,],[120,120,]),'complete_sentences':([116,118,123,130,152,153,],[121,121,129,133,154,155,]),'class_arguments':([131,132,],[134,136,]),'optional_return':([133,155,],[137,157,]),'return':([133,155,],[138,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> complete_sentence program','program',2,'p_program','parser.py',27),
  ('program -> complete_sentence','program',1,'p_program','parser.py',28),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',46),
  ('optional_newline -> NEWLINE','optional_newline',1,'p_optional_newline','parser.py',52),
  ('optional_newline -> empty','optional_newline',1,'p_optional_newline','parser.py',53),
  ('data_type -> r_operation','data_type',1,'p_data_type','parser.py',74),
  ('data_type -> string_concat','data_type',1,'p_data_type','parser.py',75),
  ('data_type -> class_atribute_use','data_type',1,'p_data_type','parser.py',76),
  ('data_type -> NONE','data_type',1,'p_data_type','parser.py',77),
  ('ref_data_type -> ID','ref_data_type',1,'p_ref_data_type','parser.py',84),
  ('ref_data_type -> class_atribute_use','ref_data_type',1,'p_ref_data_type','parser.py',85),
  ('number -> INTEGER','number',1,'p_number','parser.py',92),
  ('number -> FLOAT','number',1,'p_number','parser.py',93),
  ('string -> MULTISTRING','string',1,'p_string','parser.py',99),
  ('string -> number_to_string','string',1,'p_string','parser.py',100),
  ('arithmetic_symbol -> PLUS','arithmetic_symbol',1,'p_arithmetic_symbol','parser.py',107),
  ('arithmetic_symbol -> MINUS','arithmetic_symbol',1,'p_arithmetic_symbol','parser.py',108),
  ('arithmetic_symbol -> MUL','arithmetic_symbol',1,'p_arithmetic_symbol','parser.py',109),
  ('arithmetic_symbol -> DIV','arithmetic_symbol',1,'p_arithmetic_symbol','parser.py',110),
  ('arithmetic_symbol -> INT_DIV','arithmetic_symbol',1,'p_arithmetic_symbol','parser.py',111),
  ('arithmetic_symbol -> MOD','arithmetic_symbol',1,'p_arithmetic_symbol','parser.py',112),
  ('arithmetic_symbol -> POW','arithmetic_symbol',1,'p_arithmetic_symbol','parser.py',113),
  ('assignment_symbol -> ADD_ASSIGN','assignment_symbol',1,'p_assignment_symbol','parser.py',119),
  ('assignment_symbol -> SUB_ASSIGN','assignment_symbol',1,'p_assignment_symbol','parser.py',120),
  ('assignment_symbol -> MUL_ASSIGN','assignment_symbol',1,'p_assignment_symbol','parser.py',121),
  ('assignment_symbol -> DIV_ASSIGN','assignment_symbol',1,'p_assignment_symbol','parser.py',122),
  ('assignment_symbol -> MOD_ASSIGN','assignment_symbol',1,'p_assignment_symbol','parser.py',123),
  ('assignment_symbol -> INT_DIV_ASSIGN','assignment_symbol',1,'p_assignment_symbol','parser.py',124),
  ('assignment_symbol -> POW_ASSIGN','assignment_symbol',1,'p_assignment_symbol','parser.py',125),
  ('relational_symbol -> EQUAL','relational_symbol',1,'p_relational_symbol','parser.py',131),
  ('relational_symbol -> NOT_EQUAL','relational_symbol',1,'p_relational_symbol','parser.py',132),
  ('relational_symbol -> GREATER','relational_symbol',1,'p_relational_symbol','parser.py',133),
  ('relational_symbol -> LESS','relational_symbol',1,'p_relational_symbol','parser.py',134),
  ('relational_symbol -> GREATER_EQUAL','relational_symbol',1,'p_relational_symbol','parser.py',135),
  ('relational_symbol -> LESS_EQUAL','relational_symbol',1,'p_relational_symbol','parser.py',136),
  ('binary_logical_operator -> AND','binary_logical_operator',1,'p_binary_logical_operator','parser.py',143),
  ('binary_logical_operator -> OR','binary_logical_operator',1,'p_binary_logical_operator','parser.py',144),
  ('conditional_operator -> TRUE','conditional_operator',1,'p_conditional_operator','parser.py',150),
  ('conditional_operator -> FALSE','conditional_operator',1,'p_conditional_operator','parser.py',151),
  ('sentence -> operation','sentence',1,'p_sentence','parser.py',163),
  ('sentence -> function','sentence',1,'p_sentence','parser.py',164),
  ('sentence -> function_call','sentence',1,'p_sentence','parser.py',165),
  ('sentence -> class','sentence',1,'p_sentence','parser.py',166),
  ('complete_sentence -> sentence optional_newline','complete_sentence',2,'p_complete_sentence','parser.py',173),
  ('complete_sentences -> complete_sentence complete_sentences','complete_sentences',2,'p_complete_sentences','parser.py',179),
  ('complete_sentences -> complete_sentence','complete_sentences',1,'p_complete_sentences','parser.py',180),
  ('operation -> assignment_operation','operation',1,'p_operation','parser.py',198),
  ('operation -> simple_assignment_operation','operation',1,'p_operation','parser.py',199),
  ('operation -> r_operation','operation',1,'p_operation','parser.py',200),
  ('r_operation -> arithmetic_operation','r_operation',1,'p_r_operation','parser.py',207),
  ('r_operation -> binary_logical_operation','r_operation',1,'p_r_operation','parser.py',208),
  ('simple_assignment_operation -> ref_data_type ASSIGN data_type','simple_assignment_operation',3,'p_simple_assignment_operation','parser.py',215),
  ('simple_assignment_operation -> ref_data_type ASSIGN r_operation','simple_assignment_operation',3,'p_simple_assignment_operation','parser.py',216),
  ('assignment_operation -> ID assignment_symbol number','assignment_operation',3,'p_assignment_operation','parser.py',223),
  ('arithmetic_operation -> arithmetic_operation arithmetic_symbol arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','parser.py',229),
  ('arithmetic_operation -> LPAREN arithmetic_operation RPAREN','arithmetic_operation',3,'p_arithmetic_operation','parser.py',230),
  ('arithmetic_operation -> number','arithmetic_operation',1,'p_arithmetic_operation','parser.py',231),
  ('relational_operation -> LPAREN relational_operation RPAREN','relational_operation',3,'p_relational_operation','parser.py',245),
  ('relational_operation -> data_type relational_symbol data_type','relational_operation',3,'p_relational_operation','parser.py',246),
  ('unary_logical_operation -> NOT unary_logical_operation','unary_logical_operation',2,'p_unary_logical_operation','parser.py',257),
  ('unary_logical_operation -> LPAREN unary_logical_operation RPAREN','unary_logical_operation',3,'p_unary_logical_operation','parser.py',258),
  ('unary_logical_operation -> relational_operation','unary_logical_operation',1,'p_unary_logical_operation','parser.py',259),
  ('unary_logical_operation -> ID','unary_logical_operation',1,'p_unary_logical_operation','parser.py',260),
  ('unary_logical_operation -> conditional_operator','unary_logical_operation',1,'p_unary_logical_operation','parser.py',261),
  ('binary_logical_operation -> binary_logical_operation binary_logical_operator binary_logical_operation','binary_logical_operation',3,'p_binary_logical_operation','parser.py',275),
  ('binary_logical_operation -> LPAREN binary_logical_operation RPAREN','binary_logical_operation',3,'p_binary_logical_operation','parser.py',276),
  ('binary_logical_operation -> unary_logical_operation','binary_logical_operation',1,'p_binary_logical_operation','parser.py',277),
  ('number_to_string -> STR LPAREN number RPAREN','number_to_string',4,'p_number_to_string','parser.py',298),
  ('string_concat -> string_concat PLUS string','string_concat',3,'p_string_concat','parser.py',304),
  ('string_concat -> string','string_concat',1,'p_string_concat','parser.py',305),
  ('argument -> ID','argument',1,'p_argument','parser.py',322),
  ('argument -> ID COLON data_type','argument',3,'p_argument','parser.py',323),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',334),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments','parser.py',335),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',336),
  ('function_call -> ID LPAREN arguments RPAREN','function_call',4,'p_function_call','parser.py',348),
  ('function_call -> class_atribute_use LPAREN arguments RPAREN','function_call',4,'p_function_call','parser.py',349),
  ('return -> RETURN','return',1,'p_return','parser.py',356),
  ('return -> RETURN data_type','return',2,'p_return','parser.py',357),
  ('return -> RETURN r_operation','return',2,'p_return','parser.py',358),
  ('optional_return -> return','optional_return',1,'p_optional_return','parser.py',369),
  ('optional_return -> empty','optional_return',1,'p_optional_return','parser.py',370),
  ('function -> DEF ID LPAREN arguments RPAREN COLON NEWLINE INDENT complete_sentences optional_return DENT','function',11,'p_function','parser.py',377),
  ('class_arguments -> SELF COMMA arguments','class_arguments',3,'p_class_arguments','parser.py',389),
  ('class_arguments -> SELF','class_arguments',1,'p_class_arguments','parser.py',390),
  ('class_atribute_use -> SELF DOT ID','class_atribute_use',3,'p_class_atribute_use','parser.py',401),
  ('class_method -> DEF __INIT__ LPAREN class_arguments RPAREN COLON NEWLINE INDENT complete_sentences DENT','class_method',10,'p_class_method','parser.py',407),
  ('class_method -> DEF ID LPAREN class_arguments RPAREN COLON NEWLINE INDENT complete_sentences optional_return DENT','class_method',11,'p_class_method','parser.py',408),
  ('class_part -> class_method','class_part',1,'p_class_part','parser.py',419),
  ('class_part -> complete_sentences','class_part',1,'p_class_part','parser.py',420),
  ('class_parts -> class_parts class_part','class_parts',2,'p_class_parts','parser.py',427),
  ('class_parts -> class_part','class_parts',1,'p_class_parts','parser.py',428),
  ('class -> CLASS ID COLON NEWLINE INDENT class_parts DENT','class',7,'p_class','parser.py',439),
]
